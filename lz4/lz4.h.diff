--- lz4.h.orig	2015-04-03 20:02:29.390318702 +0200
+++ lz4.h	2015-04-03 19:58:43.252717215 +0200
@@ -38,6 +38,23 @@
 extern "C" {
 #endif
 
+/* optional conf.h file if build with -DFASTLZ_INCLUDE_CONF_H */
+#ifdef LZ4_INCLUDE_CONF_H
+#include "conf.h"
+#endif
+#ifndef ZFASTEXTERN
+#ifdef _WIN32
+#if defined(FASTLZ_DLL) || defined(DLL_EXPORT)
+#define ZFASTEXTERN __declspec(dllexport)
+#else
+#define ZFASTEXTERN __declspec(dllimport)
+#endif
+#else
+#define ZFASTEXTERN extern
+#endif
+#define ZFASTINLINE
+#endif
+
 /*
  * lz4.h provides block compression functions, for optimal performance.
  * If you need to generate inter-operable compressed data (respecting LZ4 frame specification),
@@ -51,7 +68,7 @@
 #define LZ4_VERSION_MINOR    6    /* for new (non-breaking) interface capabilities */
 #define LZ4_VERSION_RELEASE  0    /* for tweaks, bug-fixes, or development */
 #define LZ4_VERSION_NUMBER (LZ4_VERSION_MAJOR *100*100 + LZ4_VERSION_MINOR *100 + LZ4_VERSION_RELEASE)
-int LZ4_versionNumber (void);
+ZFASTEXTERN int LZ4_versionNumber (void);
 
 /**************************************
 *  Tuning parameter
@@ -70,8 +87,8 @@
 *  Simple Functions
 **************************************/
 
-int LZ4_compress        (const char* source, char* dest, int sourceSize);
-int LZ4_decompress_safe (const char* source, char* dest, int compressedSize, int maxDecompressedSize);
+ZFASTEXTERN int LZ4_compress        (const char* source, char* dest, int sourceSize);
+ZFASTEXTERN int LZ4_decompress_safe (const char* source, char* dest, int compressedSize, int maxDecompressedSize);
 
 /*
 LZ4_compress() :
@@ -111,7 +128,7 @@
     return : maximum output size in a "worst case" scenario
              or 0, if input size is too large ( > LZ4_MAX_INPUT_SIZE)
 */
-int LZ4_compressBound(int isize);
+ZFASTEXTERN int LZ4_compressBound(int isize);
 
 
 /*
@@ -126,7 +143,7 @@
     return : the number of bytes written in buffer 'dest'
              or 0 if compression fails
 */
-int LZ4_compress_limitedOutput (const char* source, char* dest, int sourceSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput (const char* source, char* dest, int sourceSize, int maxOutputSize);
 
 
 /*
@@ -135,9 +152,9 @@
     Use LZ4_sizeofState() to know how much memory must be allocated,
     and then, provide it as 'void* state' to compression functions.
 */
-int LZ4_sizeofState(void);
-int LZ4_compress_withState               (void* state, const char* source, char* dest, int inputSize);
-int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_sizeofState(void);
+ZFASTEXTERN int LZ4_compress_withState               (void* state, const char* source, char* dest, int inputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);
 
 
 /*
@@ -151,7 +168,7 @@
            However, it does not provide any protection against intentionally modified data stream (malicious input).
            Use this function in trusted environment only (data to decode comes from a trusted source).
 */
-int LZ4_decompress_fast (const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_fast (const char* source, char* dest, int originalSize);
 
 
 /*
@@ -166,7 +183,7 @@
              If the source stream is detected malformed, the function will stop decoding and return a negative result.
              This function never writes outside of output buffer, and never reads outside of input buffer. It is therefore protected against malicious data packets
 */
-int LZ4_decompress_safe_partial (const char* source, char* dest, int compressedSize, int targetOutputSize, int maxDecompressedSize);
+ZFASTEXTERN int LZ4_decompress_safe_partial (const char* source, char* dest, int compressedSize, int targetOutputSize, int maxDecompressedSize);
 
 
 /***********************************************
@@ -188,7 +205,7 @@
  * LZ4_resetStream
  * Use this function to init an allocated LZ4_stream_t structure
  */
-void LZ4_resetStream (LZ4_stream_t* LZ4_streamPtr);
+ZFASTEXTERN void LZ4_resetStream (LZ4_stream_t* LZ4_streamPtr);
 
 /*
  * LZ4_createStream will allocate and initialize an LZ4_stream_t structure
@@ -196,8 +213,8 @@
  * In the context of a DLL (liblz4), please use these methods rather than the static struct.
  * They are more future proof, in case of a change of LZ4_stream_t size.
  */
-LZ4_stream_t* LZ4_createStream(void);
-int           LZ4_freeStream (LZ4_stream_t* LZ4_streamPtr);
+ZFASTEXTERN LZ4_stream_t* LZ4_createStream(void);
+ZFASTEXTERN int           LZ4_freeStream (LZ4_stream_t* LZ4_streamPtr);
 
 /*
  * LZ4_loadDict
@@ -206,7 +223,7 @@
  * Loading a size of 0 is allowed.
  * Return : dictionary size, in bytes (necessarily <= 64 KB)
  */
-int LZ4_loadDict (LZ4_stream_t* LZ4_streamPtr, const char* dictionary, int dictSize);
+ZFASTEXTERN int LZ4_loadDict (LZ4_stream_t* LZ4_streamPtr, const char* dictionary, int dictSize);
 
 /*
  * LZ4_compress_continue
@@ -214,14 +231,14 @@
  * Previous data blocks are assumed to still be present at their previous location.
  * dest buffer must be already allocated, and sized to at least LZ4_compressBound(inputSize)
  */
-int LZ4_compress_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);
+ZFASTEXTERN int LZ4_compress_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize);
 
 /*
  * LZ4_compress_limitedOutput_continue
  * Same as before, but also specify a maximum target compressed size (maxOutputSize)
  * If objective cannot be met, compression exits, and returns a zero.
  */
-int LZ4_compress_limitedOutput_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput_continue (LZ4_stream_t* LZ4_streamPtr, const char* source, char* dest, int inputSize, int maxOutputSize);
 
 /*
  * LZ4_saveDict
@@ -231,7 +248,7 @@
  *        dictionary is immediately usable, you can therefore call again LZ4_compress_continue()
  * Return : saved dictionary size in bytes (necessarily <= dictSize), or 0 if error
  */
-int LZ4_saveDict (LZ4_stream_t* LZ4_streamPtr, char* safeBuffer, int dictSize);
+ZFASTEXTERN int LZ4_saveDict (LZ4_stream_t* LZ4_streamPtr, char* safeBuffer, int dictSize);
 
 
 /************************************************
@@ -251,8 +268,8 @@
  * LZ4_createStreamDecode will allocate and initialize an LZ4_streamDecode_t structure
  * LZ4_freeStreamDecode releases its memory.
  */
-LZ4_streamDecode_t* LZ4_createStreamDecode(void);
-int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);
+ZFASTEXTERN LZ4_streamDecode_t* LZ4_createStreamDecode(void);
+ZFASTEXTERN int                 LZ4_freeStreamDecode (LZ4_streamDecode_t* LZ4_stream);
 
 /*
  * LZ4_setStreamDecode
@@ -260,7 +277,7 @@
  * Setting a size of 0 is allowed (same effect as reset).
  * Return : 1 if OK, 0 if error
  */
-int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary, int dictSize);
+ZFASTEXTERN int LZ4_setStreamDecode (LZ4_streamDecode_t* LZ4_streamDecode, const char* dictionary, int dictSize);
 
 /*
 *_continue() :
@@ -269,8 +286,8 @@
     If this condition is not possible, save the relevant part of decoded data into a safe buffer,
     and indicate where is its new address using LZ4_setStreamDecode()
 */
-int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int compressedSize, int maxDecompressedSize);
-int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_safe_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int compressedSize, int maxDecompressedSize);
+ZFASTEXTERN int LZ4_decompress_fast_continue (LZ4_streamDecode_t* LZ4_streamDecode, const char* source, char* dest, int originalSize);
 
 
 /*
@@ -280,8 +297,8 @@
     a combination of LZ4_setDictDecode() followed by LZ4_decompress_x_continue()
     They are stand-alone and don't use nor update an LZ4_streamDecode_t structure.
 */
-int LZ4_decompress_safe_usingDict (const char* source, char* dest, int compressedSize, int maxDecompressedSize, const char* dictStart, int dictSize);
-int LZ4_decompress_fast_usingDict (const char* source, char* dest, int originalSize, const char* dictStart, int dictSize);
+ZFASTEXTERN int LZ4_decompress_safe_usingDict (const char* source, char* dest, int compressedSize, int maxDecompressedSize, const char* dictStart, int dictSize);
+ZFASTEXTERN int LZ4_decompress_fast_usingDict (const char* source, char* dest, int originalSize, const char* dictStart, int dictSize);
 
 
 
@@ -301,14 +318,14 @@
 
 
 /* Obsolete streaming functions; use new streaming interface whenever possible */
-void* LZ4_create (const char* inputBuffer);
-int   LZ4_sizeofStreamState(void);
-int   LZ4_resetStreamState(void* state, const char* inputBuffer);
-char* LZ4_slideInputBuffer (void* state);
+ZFASTEXTERN void* LZ4_create (const char* inputBuffer);
+ZFASTEXTERN int   LZ4_sizeofStreamState(void);
+ZFASTEXTERN int   LZ4_resetStreamState(void* state, const char* inputBuffer);
+ZFASTEXTERN char* LZ4_slideInputBuffer (void* state);
 
 /* Obsolete streaming decoding functions */
-int LZ4_decompress_safe_withPrefix64k (const char* source, char* dest, int compressedSize, int maxOutputSize);
-int LZ4_decompress_fast_withPrefix64k (const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_safe_withPrefix64k (const char* source, char* dest, int compressedSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_decompress_fast_withPrefix64k (const char* source, char* dest, int originalSize);
 
 
 #if defined (__cplusplus)
