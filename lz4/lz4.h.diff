--- lz4.h.orig	2014-06-27 12:54:42.010464327 +0200
+++ lz4.h	2014-06-27 12:58:16.584427101 +0200
@@ -37,6 +37,23 @@
 extern "C" {
 #endif
 
+/* optional conf.h file if build with -DFASTLZ_INCLUDE_CONF_H */
+#ifdef LZ4_INCLUDE_CONF_H
+#include "conf.h"
+#endif
+#ifndef ZFASTEXTERN
+#ifdef _WIN32
+#if defined(FASTLZ_DLL) || defined(DLL_EXPORT)
+#define ZFASTEXTERN __declspec(dllexport)
+#else
+#define ZFASTEXTERN __declspec(dllimport)
+#endif
+#else
+#define ZFASTEXTERN extern
+#endif
+#define ZFASTINLINE
+#endif
+
 
 /**************************************
    Version
@@ -63,8 +80,8 @@
    Simple Functions
 **************************************/
 
-int LZ4_compress        (const char* source, char* dest, int inputSize);
-int LZ4_decompress_safe (const char* source, char* dest, int compressedSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_compress        (const char* source, char* dest, int inputSize);
+ZFASTEXTERN int LZ4_decompress_safe (const char* source, char* dest, int compressedSize, int maxOutputSize);
 
 /*
 LZ4_compress() :
@@ -111,7 +128,7 @@
     return : maximum output size in a "worst case" scenario
              or 0, if input size is too large ( > LZ4_MAX_INPUT_SIZE)
 */
-int LZ4_compressBound(int isize);
+ZFASTEXTERN int LZ4_compressBound(int isize);
 
 
 /*
@@ -125,7 +142,7 @@
     return : the number of bytes written in buffer 'dest'
              or 0 if the compression fails
 */
-int LZ4_compress_limitedOutput (const char* source, char* dest, int inputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput (const char* source, char* dest, int inputSize, int maxOutputSize);
 
 
 /*
@@ -139,7 +156,7 @@
            It does not provide full protection against intentionnally modified data stream.
            Use this function in a trusted environment (data to decode comes from a trusted source).
 */
-int LZ4_decompress_fast (const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_fast (const char* source, char* dest, int originalSize);
 
 
 /*
@@ -154,7 +171,7 @@
              If the source stream is detected malformed, the function will stop decoding and return a negative result.
              This function never writes outside of output buffer, and never reads outside of input buffer. It is therefore protected against malicious data packets
 */
-int LZ4_decompress_safe_partial (const char* source, char* dest, int compressedSize, int targetOutputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_decompress_safe_partial (const char* source, char* dest, int compressedSize, int targetOutputSize, int maxOutputSize);
 
 
 /***********************************************
@@ -176,8 +193,8 @@
  * provides a pointer (void*) towards an initialized LZ4_stream_t structure.
  * LZ4_free just frees it.
  */
-void* LZ4_createStream();
-int   LZ4_free (void* LZ4_stream);
+ZFASTEXTERN void* LZ4_createStream();
+ZFASTEXTERN int   LZ4_free (void* LZ4_stream);
 
 
 /*
@@ -187,21 +204,21 @@
  * Loading a size of 0 is allowed (same effect as init).
  * Return : 1 if OK, 0 if error
  */
-int LZ4_loadDict (void* LZ4_stream, const char* dictionary, int dictSize);
+ZFASTEXTERN int LZ4_loadDict (void* LZ4_stream, const char* dictionary, int dictSize);
 
 /*
  * LZ4_compress_continue
  * Compress data block 'source', using blocks compressed before as dictionary to improve compression ratio
  * Previous data blocks are assumed to still be present at their previous location.
  */
-int LZ4_compress_continue (void* LZ4_stream, const char* source, char* dest, int inputSize);
+ZFASTEXTERN int LZ4_compress_continue (void* LZ4_stream, const char* source, char* dest, int inputSize);
 
 /*
  * LZ4_compress_limitedOutput_continue
  * Same as before, but also specify a maximum target compressed size (maxOutputSize)
  * If objective cannot be met, compression exits, and returns a zero.
  */
-int LZ4_compress_limitedOutput_continue (void* LZ4_stream, const char* source, char* dest, int inputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput_continue (void* LZ4_stream, const char* source, char* dest, int inputSize, int maxOutputSize);
 
 /*
  * LZ4_saveDict
@@ -212,7 +229,7 @@
  * Return : 1 if OK, 0 if error
  * Note : any dictSize > 64 KB will be interpreted as 64KB.
  */
-int LZ4_saveDict (void* LZ4_stream, char* safeBuffer, int dictSize);
+ZFASTEXTERN int LZ4_saveDict (void* LZ4_stream, char* safeBuffer, int dictSize);
 
 
 /************************************************
@@ -234,8 +251,8 @@
  * provides a pointer (void*) towards an initialized LZ4_streamDecode_t structure.
  * LZ4_free just frees it.
  */
-void* LZ4_createStreamDecode();
-int   LZ4_free (void* LZ4_stream);   /* yes, it's the same one as for compression */
+ZFASTEXTERN void* LZ4_createStreamDecode();
+ZFASTEXTERN int   LZ4_free (void* LZ4_stream);   /* yes, it's the same one as for compression */
 
 /*
 *_continue() :
@@ -244,8 +261,8 @@
     If it's not possible, save the relevant part of decoded data into a safe buffer,
     and indicate where it stands using LZ4_setDictDecode()
 */
-int LZ4_decompress_safe_continue (void* LZ4_streamDecode, const char* source, char* dest, int compressedSize, int maxOutputSize);
-int LZ4_decompress_fast_continue (void* LZ4_streamDecode, const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_safe_continue (void* LZ4_streamDecode, const char* source, char* dest, int compressedSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_decompress_fast_continue (void* LZ4_streamDecode, const char* source, char* dest, int originalSize);
 
 /*
  * LZ4_setDictDecode
@@ -255,7 +272,7 @@
  * Setting a size of 0 is allowed (same effect as no dictionary).
  * Return : 1 if OK, 0 if error
  */
-int LZ4_setDictDecode (void* LZ4_streamDecode, const char* dictionary, int dictSize);
+ZFASTEXTERN int LZ4_setDictDecode (void* LZ4_streamDecode, const char* dictionary, int dictSize);
 
 
 /*
@@ -266,8 +283,8 @@
     all together into a single function call.
     It doesn't use nor update an LZ4_streamDecode_t structure.
 */
-int LZ4_decompress_safe_usingDict (const char* source, char* dest, int compressedSize, int maxOutputSize, const char* dictStart, int dictSize);
-int LZ4_decompress_fast_usingDict (const char* source, char* dest, int originalSize, const char* dictStart, int dictSize);
+ZFASTEXTERN int LZ4_decompress_safe_usingDict (const char* source, char* dest, int compressedSize, int maxOutputSize, const char* dictStart, int dictSize);
+ZFASTEXTERN int LZ4_decompress_fast_usingDict (const char* source, char* dest, int originalSize, const char* dictStart, int dictSize);
 
 
 
@@ -282,23 +299,23 @@
 - LZ4_uncompress is the same as LZ4_decompress_fast
 - LZ4_uncompress_unknownOutputSize is the same as LZ4_decompress_safe
 */
-int LZ4_uncompress (const char* source, char* dest, int outputSize);
-int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize, int maxOutputSize);
+ZFASTEXTERN int LZ4_uncompress (const char* source, char* dest, int outputSize);
+ZFASTEXTERN int LZ4_uncompress_unknownOutputSize (const char* source, char* dest, int isize, int maxOutputSize);
 
 /* Obsolete functions for externally allocated state; use streaming interface instead */
-int LZ4_sizeofState(void);
-int LZ4_compress_withState               (void* state, const char* source, char* dest, int inputSize);
-int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_sizeofState(void);
+ZFASTEXTERN int LZ4_compress_withState               (void* state, const char* source, char* dest, int inputSize);
+ZFASTEXTERN int LZ4_compress_limitedOutput_withState (void* state, const char* source, char* dest, int inputSize, int maxOutputSize);
 
 /* Obsolete streaming functions; use new streaming interface whenever possible */
-void* LZ4_create (const char* inputBuffer);
-int   LZ4_sizeofStreamState(void);
-int   LZ4_resetStreamState(void* state, const char* inputBuffer);
-char* LZ4_slideInputBuffer (void* state);
+ZFASTEXTERN void* LZ4_create (const char* inputBuffer);
+ZFASTEXTERN int   LZ4_sizeofStreamState(void);
+ZFASTEXTERN int   LZ4_resetStreamState(void* state, const char* inputBuffer);
+ZFASTEXTERN char* LZ4_slideInputBuffer (void* state);
 
 /* Obsolete streaming decoding functions */
-int LZ4_decompress_safe_withPrefix64k (const char* source, char* dest, int compressedSize, int maxOutputSize);
-int LZ4_decompress_fast_withPrefix64k (const char* source, char* dest, int originalSize);
+ZFASTEXTERN int LZ4_decompress_safe_withPrefix64k (const char* source, char* dest, int compressedSize, int maxOutputSize);
+ZFASTEXTERN int LZ4_decompress_fast_withPrefix64k (const char* source, char* dest, int originalSize);
 
 
 #if defined (__cplusplus)
